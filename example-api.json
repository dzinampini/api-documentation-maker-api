{
    "/pet": {
        "put": {
            "tags": [
                "pet"
            ],
            "summary": "Update an existing pet.",
            "description": "Update an existing pet by Id.",
            "operationId": "updatePet",
            "requestBody": {
                "description": "Update an existent pet in the store",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                },
                "required": true
            },
            "responses": {
                "200": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid ID supplied"
                },
                "404": {
                    "description": "Pet not found"
                },
                "422": {
                    "description": "Validation exception"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        },
        "post": {
            "tags": [
                "pet"
            ],
            "summary": "Add a new pet to the store.",
            "description": "Add a new pet to the store.",
            "operationId": "addPet",
            "requestBody": {
                "description": "Create a new pet in the store",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                },
                "required": true
            },
            "responses": {
                "200": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid input"
                },
                "422": {
                    "description": "Validation exception"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        }
    },
    "/pet/findByStatus": {
        "get": {
            "tags": [
                "pet"
            ],
            "summary": "Finds Pets by status.",
            "description": "Multiple status values can be provided with comma separated strings.",
            "operationId": "findPetsByStatus",
            "parameters": [
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": false,
                    "explode": true,
                    "schema": {
                        "type": "string",
                        "default": "available",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid status value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        }
    },
    "/pet/findByTags": {
        "get": {
            "tags": [
                "pet"
            ],
            "summary": "Finds Pets by tags.",
            "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "operationId": "findPetsByTags",
            "parameters": [
                {
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": false,
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid tag value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        }
    },
    "/pet/{petId}": {
        "get": {
            "tags": [
                "pet"
            ],
            "summary": "Find pet by ID.",
            "description": "Returns a single pet.",
            "operationId": "getPetById",
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to return",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid ID supplied"
                },
                "404": {
                    "description": "Pet not found"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "api_key": []
                },
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        },
        "post": {
            "tags": [
                "pet"
            ],
            "summary": "Updates a pet in the store with form data.",
            "description": "Updates a pet resource based on the form data.",
            "operationId": "updatePetWithForm",
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet that needs to be updated",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                {
                    "name": "name",
                    "in": "query",
                    "description": "Name of pet that needs to be updated",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status of pet that needs to be updated",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid input"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        },
        "delete": {
            "tags": [
                "pet"
            ],
            "summary": "Deletes a pet.",
            "description": "Delete a pet.",
            "operationId": "deletePet",
            "parameters": [
                {
                    "name": "api_key",
                    "in": "header",
                    "description": "",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "petId",
                    "in": "path",
                    "description": "Pet id to delete",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Pet deleted"
                },
                "400": {
                    "description": "Invalid pet value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write:pets",
                        "read:pets"
                    ]
                }
            ]
        }
    },
    "/pet/{petId}/uploadImage": {
        "post": {
            "tags": [
                "pet"
            ],
            "summary": "Uploads an image.",
            "description": "Upload image of the pet.",
            "operationId": "uploadFile",
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to update",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                {
                    "name": "additionalMetadata",
                    "in": "query",
                    "description": "Additional Metadata",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "requestBody": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiResponse"
                            }
                        }
                    }
                },
                "400": {
                    "description": "No file uploaded"
                },
                "404": {
                    "description": "Pet not found"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        }
    },
    "/owner": {
        "put": {
            "tags": [
                "owner"
            ],
            "summary": "Update an existing owner.",
            "description": "Update an existing owner by Id.",
            "operationId": "updateOwner",
            "requestBody": {
                "description": "Update an existent owner in the store",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    }
                },
                "required": true
            },
            "responses": {
                "200": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid ID supplied"
                },
                "404": {
                    "description": "Owner not found"
                },
                "422": {
                    "description": "Validation exception"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        },
        "post": {
            "tags": [
                "owner"
            ],
            "summary": "Add a new owner to the store.",
            "description": "Add a new owner to the store.",
            "operationId": "addOwner",
            "requestBody": {
                "description": "Create a new owner in the store",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    }
                },
                "required": true
            },
            "responses": {
                "200": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid input"
                },
                "422": {
                    "description": "Validation exception"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        }
    },
    "/owner/findByStatus": {
        "get": {
            "tags": [
                "owner"
            ],
            "summary": "Finds Owners by status.",
            "description": "Multiple status values can be provided with comma separated strings.",
            "operationId": "findOwnersByStatus",
            "parameters": [
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": false,
                    "explode": true,
                    "schema": {
                        "type": "string",
                        "default": "available",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Owner"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Owner"
                                }
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid status value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        }
    },
    "/owner/findByTags": {
        "get": {
            "tags": [
                "owner"
            ],
            "summary": "Finds Owners by tags.",
            "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "operationId": "findOwnersByTags",
            "parameters": [
                {
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": false,
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Owner"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Owner"
                                }
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid tag value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        }
    },
    "/owner/{ownerId}": {
        "get": {
            "tags": [
                "owner"
            ],
            "summary": "Find owner by ID.",
            "description": "Returns a single owner.",
            "operationId": "getOwnerById",
            "parameters": [
                {
                    "name": "ownerId",
                    "in": "path",
                    "description": "ID of owner to return",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid ID supplied"
                },
                "404": {
                    "description": "Owner not found"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "api_key": []
                },
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        },
        "post": {
            "tags": [
                "owner"
            ],
            "summary": "Updates a owner in the store with form data.",
            "description": "Updates a owner resource based on the form data.",
            "operationId": "updateOwnerWithForm",
            "parameters": [
                {
                    "name": "ownerId",
                    "in": "path",
                    "description": "ID of owner that needs to be updated",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                {
                    "name": "name",
                    "in": "query",
                    "description": "Name of owner that needs to be updated",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status of owner that needs to be updated",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Owner"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Invalid input"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        },
        "delete": {
            "tags": [
                "owner"
            ],
            "summary": "Deletes a owner.",
            "description": "Delete a owner.",
            "operationId": "deleteOwner",
            "parameters": [
                {
                    "name": "api_key",
                    "in": "header",
                    "description": "",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "ownerId",
                    "in": "path",
                    "description": "Owner id to delete",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "Owner deleted"
                },
                "400": {
                    "description": "Invalid owner value"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            },
            "security": [
                {
                    "ownerstore_auth": [
                        "write:owners",
                        "read:owners"
                    ]
                }
            ]
        }
    },
    "/owner/{ownerId}/uploadImage": {
        "post": {
            "tags": [
                "owner"
            ],
            "summary": "Uploads an image.",
            "description": "Upload image of the owner.",
            "operationId": "uploadFile",
            "parameters": [
                {
                    "name": "ownerId",
                    "in": "path",
                    "description": "ID of owner to update",
                    "required": true,
                    "schema": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                {
                    "name": "additionalMetadata",
                    "in": "query",
                    "description": "Additional Metadata",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "requestBody": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiResponse"
                            }
                        }
                    }
                },
                "400": {
                    "description": "No file uploaded"
                },
                "404": {
                    "description": "Owner not found"
                },
                "default": {
                    "description": "Unexpected error",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            }
                        }
                    }
                }
            }
        }
    }
}